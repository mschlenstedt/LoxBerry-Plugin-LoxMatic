#/bin/bash

# Quick and Dirty...

if test $UID -ne 0; then
        echo "This script has to be run as root. Exiting."
        exit 1
fi

# Variables
KERNEL=$(uname -r | sed 's/[-+].*$//')
CURRDIR=$(pwd)

# Check for correct GIT Hash of Kernel
echo
echo "*************************************************************"
if [ -e "/boot/.firmware_revision" ]
then
	echo "OK. Found Firmware revision in /boot/.firmware_revision"
else
	echo "Could not find /boot/.firmware_revision. Please give me the GIT hash for the Firmware Revision:"
	read answer
	echo $answer > /boot/.firmware_revision
fi
echo "*************************************************************"
echo

FIRMWAREREV=$(cat /boot/.firmware_revision)

# Install needed packages for kernel comilation
echo
echo "*************************************************************"
echo "Install needed packages..."
echo "*************************************************************"
echo
apt-get -y install bison flex chrpath gawk texinfo libsdl1.2-dev whiptail diffstat cpio libssl-dev

# Prepare folders
echo
echo "*************************************************************"
echo "Prepare folders..."
echo "*************************************************************"
echo

mkdir -p /lib/modules/$(uname -r)
rm /lib/modules/$(uname -r)/build
rm /lib/modules/$(uname -r)/source
ln -s /usr/src/linux /lib/modules/$(uname -r)/build
ln -s /usr/src/linux /lib/modules/$(uname -r)/source

# Download/Update rpi-source
echo
echo "*************************************************************"
echo "Download rpi-source and install..."
echo "*************************************************************"
echo
wget https://raw.githubusercontent.com/notro/rpi-source/master/rpi-source -O /usr/local/bin/rpi-source && chmod +x /usr/local/bin/rpi-source 

# Download Kernel sources
echo
echo "*************************************************************"
echo "Download Kernel Sources..."
echo "*************************************************************"
echo
rm $CURRDIR/rpi-source.log
/usr/local/bin/rpi-source --skip-update -v -d /usr/src --nomake --delete 2>&1 | tee -a $CURRDIR/rpi-source.log

SRCCOMMIT=$(cat $CURRDIR/rpi-source.log | grep 'Linux source commit' | sed 's/.*Linux source commit: //')

rm /usr/src/linux/Module7.symvers
rm /usr/src/linux/Module7l.symvers
rm /usr/src/linux/Modulepi1.symvers
wget https://raw.githubusercontent.com/Hexxeh/rpi-firmware/$FIRMWAREREV/Module7.symvers -O /usr/src/linux/Module7.symvers
wget https://raw.githubusercontent.com/Hexxeh/rpi-firmware/$FIRMWAREREV/Module7l.symvers -O /usr/src/linux/Module7l.symvers
wget https://raw.githubusercontent.com/Hexxeh/rpi-firmware/$FIRMWAREREV/Module.symvers -O /usr/src/linux/Modulepi1.symvers

# Prepare Kernel
echo
echo "*************************************************************"
echo "Prepare Kernel..."
echo "*************************************************************"
echo
cd /usr/src/linux
make clean

[[ "$($LBHOME/bin/showpitype)" == "type_4" ]] && make bcm2711_defconfig
[[ "$($LBHOME/bin/showpitype)" == "type_3" ]] && make bcm2709_defconfig
[[ "$($LBHOME/bin/showpitype)" == "type_2" ]] && make bcm2709_defconfig
[[ "$($LBHOME/bin/showpitype)" == "type_1" ]] && make bcmrpi_defconfig
[[ "$($LBHOME/bin/showpitype)" == "type_0" ]] && make bcmrpi_defconfig

. .config
if [ ! $CONFIG_LOCALVERSION ]
then
	UNAME="$KERNEL+"
	SYMVER=""
else
	UNAME="$KERNEL$CONFIG_LOCALVERSION+"
	if [ $CONFIG_LOCALVERSION == "-v7" ]
	then
		SYMVER="7"
	else
		SYMVER="7l"
	fi
fi
mkdir -p $CURRDIR/../$UNAME

cp /usr/src/linux/Module$SYMVER.symvers /usr/src/linux/Module.symvers
yes \n | make modules_prepare

# Compile modules and integrate them into repo 
echo
echo "*************************************************************"
echo "Compile homematic modules..."
echo "*************************************************************"
echo
cd $CURRDIR/piVCCU/kernel
make clean
make

cp generic_raw_uart.ko $CURRDIR/../$UNAME/
cp eq3_char_loop.ko $CURRDIR/../$UNAME/
cp hb_rf_usb_2.ko $CURRDIR/../$UNAME/
cp hb_rf_usb.ko $CURRDIR/../$UNAME/
cp dummy_rx8130.ko $CURRDIR/../$UNAME/
cp rpi_rf_mod_led.ko $CURRDIR/../$UNAME/
cp led_trigger_timer.ko $CURRDIR/../$UNAME/
cp rtc-rx8130.ko $CURRDIR/../$UNAME/
cp pl011_raw_uart.ko $CURRDIR/../$UNAME/

# Check modules
echo
echo "*************************************************************"
echo "Check homematic modules..."
echo "*************************************************************"
echo
echo "Current kernel version is: $(uname -r)"
echo
modinfo $CURRDIR/../$UNAME/generic_raw_uart.ko

# Prepare Overlay
echo
echo "*************************************************************"
echo "Prepare Overlay..."
echo "*************************************************************"
echo
cd $CURRDIR
if [ ! -e /$CURRDIR/../pivccu-raspberrypi.dtbo ]
then
	rm pivccu-raspberrypi.dts
	wget https://raw.githubusercontent.com/alexreinert/piVCCU/master/dts/pivccu-raspberrypi.dts
	dtc -@ -I dts -O dtb -W no-unit_address_vs_reg -o /$CURRDIR/../pivccu-raspberrypi.dtbo pivccu-raspberrypi.dts
fi

echo
echo "Finished."

echo
echo "*************************************************************"
echo "Reset permissions..."
echo "*************************************************************"
echo
chown -R loxberry:loxberry $CURRDIR/../*
echo
echo
echo "Maybe you also want to update detect_radio_module?"
echo "https://github.com/alexreinert/piVCCU/tree/master/detect_radio_module"
echo

