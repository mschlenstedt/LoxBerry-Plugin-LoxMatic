#!/bin/bash

PLUGINNAME=REPLACELBPPLUGINDIR

# setup default HM RF variables
HM_MODE="NORMAL"
HM_HMRF_DEV=""
HM_HMRF_DEVNODE=""
HM_HMIP_DEV=""
HM_HMIP_DEVNODE=""
HM_KERNEL=$(uname -r)

# Libs for eq3configcmd
export HM_HOME=$LBPDATA/$PLUGINNAME/occu/arm-gnueabihf/packages-eQ-3
export LD_LIBRARY_PATH=$LBPDATA/$PLUGINNAME/occu/arm-gnueabihf/packages-eQ-3/LinuxBasis/lib/:$LBPDATA/$PLUGINNAME/occu/arm-gnueabihf/packages-eQ-3/RFD/lib
export HM_BIN=$HM_HOME/LinuxBasis/bin

# Source Notify lib
. $LBHOMEDIR/libs/bashlib/notify.sh

# Create Logfile
. $LBHOMEDIR/libs/bashlib/loxberry_log.sh
PACKAGE=$PLUGINNAME
NAME=Daemon
LOGDIR=$LBPLOG/$PLUGINNAME
STDERR=1
LOGSTART "Loxmatic Daemon started."

#############t 0 Function: kill ################

function kill_hm()
{

# Killing existing RFD
LOGINF "Killing any running RFD instance..."
if pgrep -f bin/rfd > /dev/null 2>&1 ; then
	pkill -f bin/rfd
	sleep 0.1
	pkill -9 -f bin/rfd
fi

# Killing existing HMServer
LOGINF "Killing any running HMSERVER instance..."
if pgrep -f HMIPServer.jar > /dev/null 2>&1 ; then
	pkill -f HMIPServer.jar
	sleep 0.1
	pkill -9 -f HMIPServer.jar
fi

# Killing existing multimacd
LOGINF "Killing any running MULTIMACD instance..."
if pgrep -f bin/multimacd > /dev/null 2>&1 ; then
	pkill -f bin/multimacd
	sleep 0.1
	pkill -9 -f bin/multimacd
fi

# Killing existing HM2MQTT
LOGINF "Killing any running HM2MQTT instance..."
if pgrep -f hm2mqtt/index.js > /dev/null 2>&1 ; then
        pkill -f hm2mqtt/index.js
        sleep 0.1
        pkill -9 -f hm2mqtt/index.js
fi

}


############## Function: identify_hw ################

function identify_hw()
{

#
# Identify Hardware
#
LOGINF "Identifying Homematic Hardware..."

# Reinstalling Kernel MOdules
if [[ ! -e "/lib/modules/$(uname -r)/extra/generic_raw_uart.ko" ]]; then
	if [[ -e $LBPDATA/$PLUGINNAME/kernel/$(uname -r) ]]; then
		LOGINF "(Re-)Installing Kernel modules..."
		mkdir -v -p /lib/modules/$(uname -r)/extra
		cp -v $LBPDATA/$PLUGINNAME/kernel/$(uname -r)/* /lib/modules/$(uname -r)/extra
		depmod -a
	else 
		notify $PLUGINNAME daemon "Cannot find the needed kernel modules. Giving up. Please update LoxBerry AND the Plugin to the latest versions." err > /dev/null 2>&1
		LOGERR "Cannot find the needed kernel modules. Giving up."
		LOGEND
		HM_MODE="ERROR"
		set | grep '^HM_' > $LBPCONFIG/$PLUGINNAME/hm_env
		exit 1;
	fi
fi

modprobe -v generic_raw_uart
modprobe -v eq3_char_loop

#
# Finding all installed hardware modules and initialize them
# Taken from https://github.com/alexreinert/debmatic/blob/master/debmatic/usr/share/debmatic/bin/detect_hardware.inc
# Thanks to Alexander Reinert!
#

if [ -z "$DEBMATIC_ADDRESS" ]; then
  DEBMATIC_ADDRESS=`shuf -i 1-16777215 -n 1`
  DEBMATIC_ADDRESS=`printf "0x%06x" $DEBMATIC_ADDRESS`
fi

LOGINF "Scanning for USB hardware..."
for syspath in $(find /sys/bus/usb/devices/); do
  if [ ! -e $syspath/idVendor ]; then
    continue
  fi

  USBID="`cat $syspath/idVendor`:`cat $syspath/idProduct`"

  case "$USBID" in
    "0403:6f70")
      KMOD="hb_rf_usb"
      LOGINF "Found hb_rf_usb Module."
      ;;
    "10c4:8c07" | "1b1f:c020")
      KMOD="hb_rf_usb_2"
      LOGINF "Found hb_rf_usb_2 Module."
      ;;
    *)
      continue
      ;;
  esac

  if [ $(lsmod | grep -w $KMOD | wc -l) -eq 0 ]; then
    modprobe -q $KMOD

    for try in {0..30}; do
      lsmod | grep -q -w $KMOD && RC=$? || RC=$?
      if [ $RC -eq 0 ]; then
        break
      fi
      sleep 1
    done
  fi

  for try in {0..30}; do
    if [ $(find $syspath/ -mindepth 2 -name driver | wc -l) -ne 0 ]; then
      break
    fi
    sleep 1
  done
done

for dev_no in {0..5}
do
  if [ $dev_no -eq 0 ]; then
    UART_DEV="raw-uart"
  else
    UART_DEV="raw-uart$dev_no"
  fi

  if [ -e "/sys/class/raw-uart/$UART_DEV" ]; then
    if [ ! -e "/dev/$UART_DEV" ]; then
      mknod "/dev/$UART_DEV" c `cat /sys/class/raw-uart/$UART_DEV/dev | tr ':' ' '`
    fi

    echo 1 > /sys/class/raw-uart/$UART_DEV/reset_radio_module

    MODULE_INFO=`$LBPBIN/$PLUGINNAME/detect_radio_module /dev/$UART_DEV` && RC=$? || RC=$?
    if [ $RC -eq 0 ]; then
      DEV_TYPE=`echo $MODULE_INFO | cut -d' ' -f1`
      DEV_SERIAL=`echo $MODULE_INFO | cut -d' ' -f2`

      HM_HOST_GPIO_UART="/dev/$UART_DEV"

      HM_HMIP_DEV="$DEV_TYPE"
      HM_HMIP_DEVNODE="/dev/$UART_DEV"
      HM_HMIP_SERIAL="$DEV_SERIAL"
      HM_HMIP_VERSION=`echo $MODULE_INFO | cut -d' ' -f6`
      HM_HMIP_SGTIN=`echo $MODULE_INFO | cut -d' ' -f3`
      HM_HMIP_ADDRESS=`echo $MODULE_INFO | cut -d' ' -f5`

      if [ -e "/sys/class/raw-uart/$UART_DEV/device_type" ]; then
        HM_HOST_UART_DEVICE_TYPE=`cat /sys/class/raw-uart/$UART_DEV/device_type`
        HM_HMIP_DEVTYPE="$HM_HOST_UART_DEVICE_TYPE"
      fi

      if [ "$DEV_TYPE" != "HMIP-RFUSB-TK" ]; then
        HM_HMRF_DEV="$HM_HMIP_DEV"
        HM_HMRF_DEVNODE="$HM_HMIP_DEVNODE"
        HM_HMRF_SERIAL="$HM_HMIP_SERIAL"
        HM_HMRF_VERSION="$HM_HMIP_VERSION"
        HM_HMRF_ADDRESS=`echo $MODULE_INFO | cut -d' ' -f4`
        HM_HMRF_DEVTYPE="$HM_HMIP_DEVTYPE"
      fi

      if [ "$HM_HMRF_ADDRESS" == "0x000000" ]; then
        HM_HMRF_ADDRESS="$DEBMATIC_ADDRESS"
      fi

      break
    fi
  fi
done

for syspath in $(find /sys/bus/usb/devices/); do
  if [ -e $syspath/idVendor ] && [ "`cat $syspath/idVendor`" == "1b1f" ] && [ "`cat $syspath/idProduct`" == "c00f" ]; then
    HM_HMRF_DEV="HM-CFG-USB-2"
    HM_HMRF_DEVNODE="/dev/$(udevadm info -q name -p $syspath)"

    if [ ! -e "$HM_HMRF_DEVNODE" ]; then
      mkdir -p `dirname $HM_HMRF_DEVNODE`
      mknod "$HM_HMRF_DEVNODE" c `cat $syspath/dev | tr ':' ' '`
    fi

    HM_HMRF_SERIAL=`cat $syspath/serial | tr '[:lower:]' '[:upper:]'`
    HM_HMRF_VERSION=""
    HM_HMRF_ADDRESS="$DEBMATIC_ADDRESS"
    HM_HMRF_DEVTYPE="USB"
    break
  fi 
done

#
# Loading LED modules
# Taken from https://github.com/alexreinert/debmatic/blob/master/debmatic/usr/share/debmatic/bin/load_led_modules.sh
# Thanks to Alexander Reinert!
#

RED_PIN=0
GREEN_PIN=0
BLUE_PIN=0

HMIP_RAW_UART="$(basename $HM_HMIP_DEVNODE)"

if [ "$HM_HMRF_DEV" == "RPI-RF-MOD" ]; then
  if [ -e "/sys/module/generic_raw_uart/parameters/load_dummy_rx8130_module" ]; then
    echo 1 > /sys/module/generic_raw_uart/parameters/load_dummy_rx8130_module
  else
    modprobe dummy_rx8130
  fi

  if [ -e "/sys/class/raw-uart/$HMIP_RAW_UART/red_gpio_pin" ]; then
    RED_PIN=`cat /sys/class/raw-uart/$HMIP_RAW_UART/red_gpio_pin`
    GREEN_PIN=`cat /sys/class/raw-uart/$HMIP_RAW_UART/green_gpio_pin`
    BLUE_PIN=`cat /sys/class/raw-uart/$HMIP_RAW_UART/blue_gpio_pin`
  fi
fi

modprobe -q ledtrig-default-on || true
modprobe -q ledtrig-timer || modprobe -q led_trigger_timer || true

if [ -w "/sys/module/rpi_rf_mod_led/parameters/red_gpio_pin" ]; then
  echo "$RED_PIN" > /sys/module/rpi_rf_mod_led/parameters/red_gpio_pin
  echo "$GREEN_PIN" > /sys/module/rpi_rf_mod_led/parameters/green_gpio_pin
  echo "$BLUE_PIN" > /sys/module/rpi_rf_mod_led/parameters/blue_gpio_pin
else
  modprobe rpi_rf_mod_led red_gpio_pin=$RED_PIN green_gpio_pin=$GREEN_PIN blue_gpio_pin=$BLUE_PIN || true
fi

# Turn off all leds
echo none > /sys/class/leds/rpi_rf_mod:green/trigger
echo none > /sys/class/leds/rpi_rf_mod:red/trigger
echo none > /sys/class/leds/rpi_rf_mod:blue/trigger
echo 0 > /sys/class/leds/rpi_rf_mod:green/brightness
echo 0 > /sys/class/leds/rpi_rf_mod:red/brightness
echo 0 > /sys/class/leds/rpi_rf_mod:blue/brightness

#set | grep '^HM_' > $LBPCONFIG/$PLUGINNAME/hm_env

}


############## Function: init_hw ################

function init_hw()
{

#
# Init Hardware
# Taken from https://github.com/alexreinert/debmatic/blob/master/debmatic/usr/share/debmatic/bin/update_rf_firmware.sh
# Thanks to Alexander Reinert!
#

JAVA_HOME=$(update-java-alternatives --jre-headless --list | grep "\\W\(108\|111\|211\|180\)[0-9]\+\\W" | tr -s " " | sort -k2 | tail -1 | cut -d" " -f3)

if [ "$HM_HMIP_DEV" == "HM-MOD-RPI-PCB" ]; then
  NEW_VERSION=`grep 'dualcopro_si1002_update_blhm.eq3' /firmware/HM-MOD-UART/fwmap | awk '{print $3}'`

  if [ -n "$NEW_VERSION" ] && [ "$NEW_VERSION" != "$HM_HMIP_VERSION" ]; then
    LOGINF "Starting Update of HM-MOD-RPI-PCB to Version $NEW_VERSION..."

    $HM_BIN/eq3configcmd update-coprocessor -p $HM_HMIP_DEVNODE -t HM-MOD-UART -u -d /firmware/HM-MOD-UART

    HM_HMIP_VERSION=`$HM_BIN/eq3configcmd update-coprocessor -p $HM_HMIP_DEVNODE -t HM-MOD-UART -c -v 2>&1 | grep "Version:" | cut -d' ' -f5`

    LOGINF "Version after flashing is: $HM_HMIP_VERSION"

    if [ "$HM_HMIP_DEV" == "$HM_HMRF_DEV" ]; then
      HM_HMRF_VERSION=$HM_HMIP_VERSION
    fi

    #set | grep '^HM_' > $LBPCONFIG/$PLUGINNAME/hm_env

    if [ "$NEW_VERSION" != "$HM_HMIP_VERSION" ]; then
      LOGERR "Failed to Update HM-MOD-RPI-PCB to Version $NEW_VERSION."
    else
      LOGOK "Successfully updated HM-MOD-RPI-PCB to Version $NEW_VERSION."
    fi
  elif [ -n "$NEW_VERSION" ]; then
    LOGOK "HM-MOD-RPI-PCB has already desired Version $NEW_VERSION..."
  fi
fi

if [ "$HM_HMIP_DEV" == "RPI-RF-MOD" ]; then
  NEW_VERSION=`ls /firmware/RPI-RF-MOD/dualcopro_update_blhmip-*.eq3 | sed 's/.*-\(.*\)\.eq3/\1/' | sort | tail -1`

  if [ -n "$NEW_VERSION" ] && [ "$NEW_VERSION" != "$HM_HMIP_VERSION" ]; then
    LOGINF "Starting update of RPI-RF-MOD to Version $NEW_VERSION..."

    HM_HMIP_VERSION=`JAVA_HOME=$JAVA_HOME $JAVA_HOME/bin/java $JAVA_ARGS -Dgnu.io.rxtx.SerialPorts=$HM_HMIP_DEVNODE -jar /opt/HmIP/hmip-copro-update.jar -p $HM_HMIP_DEVNODE -o -f /firmware/RPI-RF-MOD/dualcopro_update_blhmip-$NEW_VERSION.eq3 2>/dev/null | grep "Version:" | cut -d' ' -f5`

    LOGINF "Version after flashing is: $HM_HMIP_VERSION"

    if [ "$HM_HMIP_DEV" == "$HM_HMRF_DEV" ]; then
      HM_HMRF_VERSION=$HM_HMIP_VERSION
    fi

    #set | grep '^HM_' > $LBPCONFIG/$PLUGINNAME/hm_env

    if [ "$NEW_VERSION" != "$HM_HMIP_VERSION" ]; then
      LOGERR "Failed to update RPI-RF-MOD to Version $NEW_VERSION."
    else
      LOGOK "Successfully updated RPI-RF-MOD to Version $NEW_VERSION."
    fi
  elif [ -n "$NEW_VERSION" ]; then
    LOGOK "RPI-RF-MOD has already desired Version $NEW_VERSION..."
  fi
fi

}


############## Function: start_hm ################

function start_hm()
{

# What is enabled?
RFDENABLED=$(jq -r '.EnableRFD' $LBPCONFIG/$PLUGINNAME/loxmatic.json)
HMIPSERVERENABLED=$(jq -r '.EnableHMIPSERVER' $LBPCONFIG/$PLUGINNAME/loxmatic.json)
HM2MQTTENABLED=$(jq -r '.EnableHM2MQTT' $LBPCONFIG/$PLUGINNAME/loxmatic.json)

# Should multimacd be started: Needed if RFD or HMIPServer should be started
if [[ "$RFDENABLED" = "true" ]] || [[ "$RFDENABLED" = "1" ]] || [[ "$HMIPSERVERENABLED" = "true" ]] || [[ "$HMIPSERVERENABLED" = "1" ]];  then
	LOGINF "Starting MULTIMACD..."
	$LBPBIN/$PLUGINNAME/multimacd.sh > /dev/null 2>&1
	STEPS=150
	for i in $(seq 1 ${STEPS}); do
		sleep 1
		echo -n "."
		if pgrep -f bin/multimacd > /dev/null 2>&1 ; then
			LOGOK "Multimacd started successfully"
			MULTIMACDPID=$(pgrep -f bin/multimacd)
			break
		fi
		if [[ ${i} -eq ${STEPS} ]]; then
			LOGERR "ERROR starting multimacd"
			MULTIMACDPID="None"
			break
		fi
	done
fi

# Should RFD be started
if [[ "$RFDENABLED" = "true" ]] || [[ "$RFDENABLED" = "1" ]];  then
	LOGINF "Starting RFD..."
	$LBPBIN/$PLUGINNAME/rfd.sh > /dev/null 2>&1
	STEPS=150
	for i in $(seq 1 ${STEPS}); do
		sleep 1
		echo -n "."
		if lsof -Pi :2001 -sTCP:LISTEN -t > /dev/null 2>&1 ; then
		#if pgrep -f bin/rfd > /dev/null 2>&1 ; then
			LOGOK "RFD started successfully"
			RFDPID=$(pgrep -f bin/rfd)
			break
		fi
		if [[ ${i} -eq ${STEPS} ]]; then
			LOGERR "ERROR starting RFD"
			RFDPID="None"
			break
		fi
	done
fi

# Should HMServer be started
if [[ "$HMIPSERVERENABLED" = "true" ]] || [[ "$HMIPSERVERENABLED" = "1" ]];  then
	LOGINF "Starting HMSERVER..."
	$LBPBIN/$PLUGINNAME/hmserver.sh > /dev/null 2>&1
	STEPS=150
	for i in $(seq 1 ${STEPS}); do
		sleep 1
		echo -n "."
		if lsof -Pi :2010 -sTCP:LISTEN -t > /dev/null 2>&1 ; then
		#if pgrep -f HMIPServer.jar > /dev/null 2>&1 ; then
			LOGOK "HMServer started successfully"
			HMSERVERPID=$(pgrep -f HMIPServer.jar)
			break
		fi
		if [[ ${i} -eq ${STEPS} ]]; then
			LOGERR "ERROR starting HMServer"
			HMSERVERPID="None"
			break
		fi
	done
fi

# Should HM2MQTT be started
if [[ "$HM2MQTTENABLED" = "true" ]] || [[ "$HM2MQTTENABLED" = "1" ]];  then
	LOGINF "Starting HM2MQTT..."
	sudo -n -u loxberry $LBPBIN/$PLUGINNAME/hm2mqtt.sh > /dev/null 2>&1
	STEPS=150
	for i in $(seq 1 ${STEPS}); do
		sleep 1
		echo -n "."
		if pgrep -f hm2mqtt/index.js > /dev/null 2>&1 ; then
			LOGOK "HM2MQTT started successfully"
			HM2MQTTPID=$(pgrep -f hm2mqtt/index.js)
			break
		fi
		if [[ ${i} -eq ${STEPS} ]]; then
			LOGERR "ERROR starting HM2MQTT"
			HM2MQTTPID="None"
			break
		fi
	done
fi

}


############## END Functions ################

# Stop any running HM software
kill_hm

# Use shortmode if not during boot up
if [[ $1 == "short" ]]; then
	LOGINF "We are in short mode. No hardware initialisation will be done."
	# Source HM environment
	[[ -r $LBPCONFIG/$PLUGINNAME/hm_env ]] && . $LBPCONFIG/$PLUGINNAME/hm_env
else
	LOGINF "We are in long mode. Hardware will be initialized."
	identify_hw
	init_hw
	# save all HM_ env variables
	set | grep '^HM_' > $LBPCONFIG/$PLUGINNAME/hm_env
fi

LOGINF "This is the HM environment:"
cat $LBPCONFIG/$PLUGINNAME/hm_env >> ${FILENAME}
cat $LBPCONFIG/$PLUGINNAME/hm_env

# Start Homematic
start_hm

# output some status information
[[ ! -n "${HM_HMRF_DEV}" ]] && HM_HMRF_DEV="None"
[[ ! -n "${HM_HMIP_DEV}" ]] && HM_HMIP_DEV="None"
LOGINF "BidCos-RF: ${HM_HMRF_DEV}"
LOGINF "HmIP: ${HM_HMIP_DEV}"
LOGINF "Multimacd: ${MULTIMACDPID}"
LOGINF "RFD: ${RFDPID}"
LOGINF "HMIPServer: ${HMSERVERPID}"
LOGINF "HM2MQTT: ${HM2MQTTPID}"

chown -R loxberry:loxberry $LBPCONFIG/$PLUGINNAME

# Show some more informations if in Debug mode
if [ $LOGLEVEL -eq 7 ]; then
	LOGINF "We are in debug mode. So here are some more system information which may help:"
	LOGINF "The following plugins are installed:"
	cat $LBSDATA/plugindatabase.dat >> ${FILENAME}
	LOGINF "The system is:"
	uname -a >> ${FILENAME}
	LOGINF "Loaded kernel modules:"
	lsmod >> ${FILENAME}
	LOGINF "/boot/config.txt is:"
	cat /boot/config.txt >> ${FILENAME}
	LOGINF "/boot/cmdline.txt is:"
	cat /boot/cmdline.txt >> ${FILENAME}
fi

LOGEND "Exit."

exit 0
